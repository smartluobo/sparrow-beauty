<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chaomeis.sparrowbeauty.mapper.TbUserPayRecordMapper">
  <resultMap id="BaseResultMap" type="com.chaomeis.sparrowbeauty.entity.TbUserPayRecord">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="api_user_id" jdbcType="INTEGER" property="apiUserId" />
    <result column="open_id" jdbcType="VARCHAR" property="openId" />
    <result column="order_id" jdbcType="VARCHAR" property="orderId" />
    <result column="order_amount" jdbcType="VARCHAR" property="orderAmount" />
    <result column="payment_amount" jdbcType="VARCHAR" property="paymentAmount" />
    <result column="nonce_str" jdbcType="VARCHAR" property="nonceStr" />
    <result column="prepay_id" jdbcType="VARCHAR" property="prepayId" />
    <result column="pay_status" jdbcType="INTEGER" property="payStatus" />
    <result column="transaction_id" jdbcType="VARCHAR" property="transactionId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, api_user_id, open_id, order_id, order_amount, payment_amount, nonce_str, prepay_id, 
    pay_status, transaction_id, create_time, update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_user_pay_record
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_user_pay_record
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.chaomeis.sparrowbeauty.entity.TbUserPayRecord">
    insert into tb_user_pay_record (id, api_user_id, open_id, 
      order_id, order_amount, payment_amount, 
      nonce_str, prepay_id, pay_status, 
      transaction_id, create_time, update_time
      )
    values (#{id,jdbcType=INTEGER}, #{apiUserId,jdbcType=INTEGER}, #{openId,jdbcType=VARCHAR}, 
      #{orderId,jdbcType=VARCHAR}, #{orderAmount,jdbcType=VARCHAR}, #{paymentAmount,jdbcType=VARCHAR}, 
      #{nonceStr,jdbcType=VARCHAR}, #{prepayId,jdbcType=VARCHAR}, #{payStatus,jdbcType=INTEGER}, 
      #{transactionId,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.chaomeis.sparrowbeauty.entity.TbUserPayRecord">
    insert into tb_user_pay_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="apiUserId != null">
        api_user_id,
      </if>
      <if test="openId != null">
        open_id,
      </if>
      <if test="orderId != null">
        order_id,
      </if>
      <if test="orderAmount != null">
        order_amount,
      </if>
      <if test="paymentAmount != null">
        payment_amount,
      </if>
      <if test="nonceStr != null">
        nonce_str,
      </if>
      <if test="prepayId != null">
        prepay_id,
      </if>
      <if test="payStatus != null">
        pay_status,
      </if>
      <if test="transactionId != null">
        transaction_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="apiUserId != null">
        #{apiUserId,jdbcType=INTEGER},
      </if>
      <if test="openId != null">
        #{openId,jdbcType=VARCHAR},
      </if>
      <if test="orderId != null">
        #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="orderAmount != null">
        #{orderAmount,jdbcType=VARCHAR},
      </if>
      <if test="paymentAmount != null">
        #{paymentAmount,jdbcType=VARCHAR},
      </if>
      <if test="nonceStr != null">
        #{nonceStr,jdbcType=VARCHAR},
      </if>
      <if test="prepayId != null">
        #{prepayId,jdbcType=VARCHAR},
      </if>
      <if test="payStatus != null">
        #{payStatus,jdbcType=INTEGER},
      </if>
      <if test="transactionId != null">
        #{transactionId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.chaomeis.sparrowbeauty.entity.TbUserPayRecord">
    update tb_user_pay_record
    <set>
      <if test="apiUserId != null">
        api_user_id = #{apiUserId,jdbcType=INTEGER},
      </if>
      <if test="openId != null">
        open_id = #{openId,jdbcType=VARCHAR},
      </if>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=VARCHAR},
      </if>
      <if test="orderAmount != null">
        order_amount = #{orderAmount,jdbcType=VARCHAR},
      </if>
      <if test="paymentAmount != null">
        payment_amount = #{paymentAmount,jdbcType=VARCHAR},
      </if>
      <if test="nonceStr != null">
        nonce_str = #{nonceStr,jdbcType=VARCHAR},
      </if>
      <if test="prepayId != null">
        prepay_id = #{prepayId,jdbcType=VARCHAR},
      </if>
      <if test="payStatus != null">
        pay_status = #{payStatus,jdbcType=INTEGER},
      </if>
      <if test="transactionId != null">
        transaction_id = #{transactionId,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.chaomeis.sparrowbeauty.entity.TbUserPayRecord">
    update tb_user_pay_record
    set api_user_id = #{apiUserId,jdbcType=INTEGER},
      open_id = #{openId,jdbcType=VARCHAR},
      order_id = #{orderId,jdbcType=VARCHAR},
      order_amount = #{orderAmount,jdbcType=VARCHAR},
      payment_amount = #{paymentAmount,jdbcType=VARCHAR},
      nonce_str = #{nonceStr,jdbcType=VARCHAR},
      prepay_id = #{prepayId,jdbcType=VARCHAR},
      pay_status = #{payStatus,jdbcType=INTEGER},
      transaction_id = #{transactionId,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>